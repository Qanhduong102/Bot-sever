import tkinter as tk
from tkinter import scrolledtext
import socketio
import pyttsx3
import speech_recognition as sr
import sys
import io
import time
import threading
from PIL import Image, ImageTk
import webbrowser
from socketIO_client import SocketIO

# Thi·∫øt l·∫≠p m√£ h√≥a UTF-8 cho console
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

# ƒê·ªãa ch·ªâ server WebSocket
SERVER_URL = "https://bot-sever-aice.onrender.com"

# T·∫°o client WebSocket
sio = socketio.Client()

class ChatClient:
    def __init__(self, root):
        self.root = root
        self.root.title("Chatbot Client")
        self.root.geometry("800x600")
        self.root.configure(bg="#1e1e2f")
        self.center_window(800, 600)
        self.conversation_count = 0  # Bi·∫øn ƒë·∫øm s·ªë cu·ªôc h·ªôi tho·∫°i ƒë√£ t·∫°o
        self.conversations = []  # Danh s√°ch l∆∞u tr·ªØ c√°c cu·ªôc h·ªôi tho·∫°i
        self.current_conversation = []  # Cu·ªôc h·ªôi tho·∫°i hi·ªán t·∫°i
        self.is_connected = False  # Bi·∫øn theo d√µi k·∫øt n·ªëi
        self.current_conversation_index = None  # Ban ƒë·∫ßu kh√¥ng c√≥ cu·ªôc h·ªôi tho·∫°i n√†o ƒë∆∞·ª£c ch·ªçn
        self.chat_area = scrolledtext.ScrolledText(
            root, wrap=tk.WORD, state='disabled', height=20, width=60,
            bg='#2c2c3e', fg="#f0f0f0", font=('Roboto', 12),
            bd=0, highlightthickness=1, highlightbackground="#4CAF50"
        )
        self.chat_area.grid(row=1, column=1, padx=10, pady=10, sticky="nsew")

        # T·∫£i ·∫£nh avatar
        avatar_image = Image.open("avatar.png")  # ƒê∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh avatar
        avatar_image = avatar_image.resize((50, 50), Image.Resampling.LANCZOS)  # Resize ·∫£nh
        self.avatar_photo = ImageTk.PhotoImage(avatar_image)

        # T·∫°o widget Label hi·ªÉn th·ªã avatar
        self.avatar_label = tk.Label(
            root, image=self.avatar_photo, bg="#1e1e2f"
    )
        self.avatar_label.grid(row=0, column=0, padx=10, pady=10, sticky="nw")  # ƒê·∫∑t ·ªü g√≥c tr√°i tr√™n c√πng

        # Ti√™u ƒë·ªÅ (ƒë·∫©y sang b√™n c·∫°nh avatar)
        self.header = tk.Label(
        root, text="üé® J.A.R.V.I.S üé§",
        font=("Montserrat", 16, "bold"),
        fg="#ffffff", bg="#1e1e2f"
    )
        self.header.grid(row=0, column=0, columnspan=2, pady=(10, 0), sticky="n")

        # Khung b√™n tr√°i cho c√°c n√∫t qu·∫£n l√Ω h·ªôi tho·∫°i
        self.left_panel = tk.Frame(
            root, width=150, bg="#2c2c3e", highlightthickness=1, highlightbackground="#4CAF50"
        )
        self.left_panel.grid(row=1, column=0, rowspan=2, padx=10, pady=10, sticky="ns")

        # Listbox ƒë·ªÉ hi·ªÉn th·ªã c√°c cu·ªôc h·ªôi tho·∫°i
        self.conversation_listbox = tk.Listbox(
            self.left_panel, bg="#2c2c3e", fg="#f0f0f0", font=("Roboto", 12),
            bd=0, selectbackground="#4CAF50", highlightthickness=1, highlightbackground="#4CAF50",
            height=15
        )
        self.conversation_listbox.pack(padx=10, pady=10, fill="y")

        # **D√≤ng bind ph·∫£i n·∫±m sau khi self.conversation_listbox ƒë∆∞·ª£c kh·ªüi t·∫°o**
        self.conversation_listbox.bind("<<ListboxSelect>>", self.on_conversation_select)

        # T·∫°o khung ch·ª©a c√°c n√∫t
        self.button_frame = tk.Frame(
            self.left_panel, bg="#2c2c3e", highlightthickness=1, highlightbackground="#4CAF50", padx=10, pady=10
        )
        self.button_frame.pack(side="bottom", pady=(10, 0), fill="x")  # ƒê·∫∑t ·ªü d∆∞·ªõi c√πng v√† cƒÉng ngang

        # N√∫t New Conversation
        self.new_conv_button = tk.Button(
            self.button_frame, text="New Conversation",
            command=self.new_conversation,
            bg="#4CAF50", fg="white", font=("Roboto", 10, "bold"),
            relief="flat", activebackground="#45a049", activeforeground="white",
            cursor="hand2"
        )
        self.new_conv_button.pack(pady=(10, 5), padx=10, fill="x")

        # N√∫t Delete Conversation
        self.delete_conv_button = tk.Button(
            self.button_frame, text="Delete Conversation",
            command=self.delete_conversation,
            bg="#F44336", fg="white", font=("Roboto", 10, "bold"),
            relief="flat", activebackground="#D32F2F", activeforeground="white",
            cursor="hand2"
        )
        self.delete_conv_button.pack(pady=(5, 10), padx=10, fill="x")

        # Khung hi·ªÉn th·ªã h·ªôi tho·∫°i (L·ªãch s·ª≠ h·ªôi tho·∫°i)
        self.chat_area = scrolledtext.ScrolledText(
            root, wrap=tk.WORD, state='disabled', height=20, width=60,
            bg='#2c2c3e', fg="#f0f0f0", font=('Roboto', 12),
            bd=0, highlightthickness=1, highlightbackground="#4CAF50"
        )
        self.chat_area.grid(row=1, column=1, padx=10, pady=10, sticky="nsew")

        # Khung nh·∫≠p tin nh·∫Øn v√† n√∫t g·ª≠i
        self.bottom_panel = tk.Frame(root, bg="#1e1e2f")
        self.bottom_panel.grid(row=2, column=1, padx=10, pady=10, sticky="w")

        self.entry = tk.Entry(
            self.bottom_panel, width=40, font=('Roboto', 12),
            bg="#2c2c3e", fg="#ffffff", insertbackground="#ffffff",
            bd=0, highlightthickness=1, highlightbackground="#4CAF50"
        )
        self.entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
        self.entry.bind("<Return>", lambda event: self.send_message())

        self.send_button = tk.Button(
            self.bottom_panel, text="Send",
            command=self.send_message,
            bg='#4CAF50', fg='white', font=('Roboto', 12, 'bold'),
            relief='flat', activebackground="#45a049", activeforeground="white",
            cursor="hand2"
        )
        self.send_button.pack(side="left", padx=(0, 10))

        self.voice_button = tk.Button(
            self.bottom_panel, text="üé§ Speak",
            command=self.speak_message,
            bg='#2196F3', fg='white', font=('Roboto', 12, 'bold'),
            relief='flat', activebackground="#1976D2", activeforeground="white",
            cursor="hand2"
        )
        self.voice_button.pack(side="left")

        # Thi·∫øt l·∫≠p engine TTS
        self.engine = pyttsx3.init()
        self.engine.setProperty('rate', 150)
        self.tts_enabled = False

        # Danh s√°ch l∆∞u tr·ªØ l·ªãch s·ª≠ h·ªôi tho·∫°i
        self.conversations = []
        self.current_conversation = []

        self.connect_to_server()

    def center_window(self, width, height):
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        x = (screen_width - width) // 2
        y = (screen_height - height) // 2
        self.root.geometry(f"{width}x{height}+{x}+{y}")
    def get_next_conversation_number(self):
        """L·∫•y s·ªë th·ª© t·ª± cu·ªôc h·ªôi tho·∫°i ti·∫øp theo d·ª±a tr√™n c√°c cu·ªôc h·ªôi tho·∫°i c√≤n t·ªìn t·∫°i."""
        # Ki·ªÉm tra c√°c cu·ªôc h·ªôi tho·∫°i hi·ªán t·∫°i v√† t√¨m s·ªë th·ª© t·ª± nh·ªè nh·∫•t b·ªã thi·∫øu
        existing_numbers = [int(conv.split()[1]) for conv in self.conversation_listbox.get(0, tk.END)]
        next_number = 1  # B·∫Øt ƒë·∫ßu t·ª´ 1

        # T√¨m s·ªë th·ª© t·ª± ti·∫øp theo m√† ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng
        while next_number in existing_numbers:
            next_number += 1

        return next_number

    def new_conversation(self):
        """T·∫°o cu·ªôc h·ªôi tho·∫°i m·ªõi v√† l√†m m·ªõi n·ªôi dung khung chat."""
        # L·∫•y s·ªë th·ª© t·ª± cu·ªôc h·ªôi tho·∫°i ti·∫øp theo
        next_conversation_number = self.get_next_conversation_number()

        # N·∫øu c√≥ cu·ªôc h·ªôi tho·∫°i hi·ªán t·∫°i, l∆∞u n·ªôi dung v√†o danh s√°ch
        if self.current_conversation_index is not None:
            self.conversations[self.current_conversation_index] = self.chat_area.get("1.0", tk.END).strip().split("\n")

        # T·∫°o cu·ªôc h·ªôi tho·∫°i m·ªõi
        conversation_name = f"Conversation {next_conversation_number}"
        self.conversations.append([])  # Th√™m m·ªôt danh s√°ch tr·ªëng cho cu·ªôc h·ªôi tho·∫°i m·ªõi
        self.conversation_listbox.insert(tk.END, conversation_name)  # Hi·ªÉn th·ªã trong Listbox

        # Chuy·ªÉn sang cu·ªôc h·ªôi tho·∫°i m·ªõi
        self.current_conversation_index = len(self.conversations) - 1

        # L√†m m·ªõi khung chat
        self.chat_area.config(state='normal')
        self.chat_area.delete("1.0", tk.END)  # X√≥a n·ªôi dung c≈©
        self.chat_area.insert(tk.END, "üÜï New conversation started. How can I assist you?\n")
        self.chat_area.config(state='disabled')  # Kh√¥ng cho ch·ªânh s·ª≠a tr·ª±c ti·∫øp
        self.chat_area.yview(tk.END)  # Cu·ªôn xu·ªëng cu·ªëi c√πng

        # Gi·ªØ k·∫øt n·ªëi server (n·∫øu b·ªã ng·∫Øt, th√¨ k·∫øt n·ªëi l·∫°i)
        if not self.is_connected:
            self.connect_to_server()

        # T·∫Øt t√≠nh nƒÉng TTS n·∫øu ƒëang b·∫≠t
        self.tts_enabled = False

        # ƒê·∫£m b·∫£o giao di·ªán ph·∫£n √°nh tr·∫°ng th√°i m·ªõi
        self.chat_area.yview(tk.END)  # Cu·ªôn xu·ªëng cu·ªëi c√πng

    def delete_conversation(self):
        """X√≥a cu·ªôc h·ªôi tho·∫°i ƒë√£ ch·ªçn kh·ªèi Listbox v√† danh s√°ch."""
        try:
            selected_index = self.conversation_listbox.curselection()
            if not selected_index:
                return  # Kh√¥ng c√≥ cu·ªôc h·ªôi tho·∫°i n√†o ƒë∆∞·ª£c ch·ªçn

            selected_index = selected_index[0]

            # X√≥a cu·ªôc h·ªôi tho·∫°i kh·ªèi danh s√°ch
            del self.conversations[selected_index]
            self.conversation_listbox.delete(selected_index)

            # C·∫≠p nh·∫≠t ch·ªâ m·ª•c cu·ªôc h·ªôi tho·∫°i hi·ªán t·∫°i
            if len(self.conversations) == 0:
                self.current_conversation_index = None  # Kh√¥ng c√≤n cu·ªôc h·ªôi tho·∫°i n√†o
                self.chat_area.config(state='normal')
                self.chat_area.delete("1.0", tk.END)  # L√†m tr·ªëng khung chat
                self.chat_area.config(state='disabled')
            else:
                # Chuy·ªÉn sang cu·ªôc h·ªôi tho·∫°i ƒë·∫ßu ti√™n trong danh s√°ch (n·∫øu c√≤n)
                self.current_conversation_index = 0
                self.on_conversation_select(None)

        except Exception as e:
            print(f"Error deleting conversation: {e}")

    def refresh_conversations(self):
        """C·∫≠p nh·∫≠t l·∫°i danh s√°ch c√°c cu·ªôc h·ªôi tho·∫°i trong Listbox."""
        self.conversation_listbox.delete(0, tk.END)  # X√≥a h·∫øt c√°c m·ª•c c≈©
        for conv in self.conversations:
            # Th√™m v√†o danh s√°ch v·ªõi t√™n cu·ªôc h·ªôi tho·∫°i
            self.conversation_listbox.insert(tk.END, f"Conversation {self.get_next_conversation_number()}")


    def display_conversation(self, index):
        """Hi·ªÉn th·ªã n·ªôi dung h·ªôi tho·∫°i ƒë∆∞·ª£c ch·ªçn."""
        if 0 <= index < len(self.conversations):
            self.current_conversation = self.conversations[index]
            self.chat_area.config(state='normal')
            self.chat_area.delete("1.0", tk.END)
            for message in self.current_conversation:
                self.chat_area.insert(tk.END, f"{message}\n")
            self.chat_area.config(state='disabled')
        else:
            self.chat_area.config(state='normal')
            self.chat_area.delete("1.0", tk.END)
            self.chat_area.insert(tk.END, "No conversation selected.\n")
            self.chat_area.config(state='disabled')

    def on_conversation_select(self, event):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn m·ªôt cu·ªôc h·ªôi tho·∫°i t·ª´ Listbox."""
        # L·∫•y ch·ªâ m·ª•c cu·ªôc h·ªôi tho·∫°i ƒë∆∞·ª£c ch·ªçn
        selected_index = self.conversation_listbox.curselection()
        if not selected_index:
            return  # Kh√¥ng c√≥ cu·ªôc h·ªôi tho·∫°i n√†o ƒë∆∞·ª£c ch·ªçn

        selected_index = selected_index[0]

        # L∆∞u n·ªôi dung cu·ªôc h·ªôi tho·∫°i hi·ªán t·∫°i tr∆∞·ªõc khi chuy·ªÉn
        if self.current_conversation_index is not None:
            self.conversations[self.current_conversation_index] = self.chat_area.get("1.0", tk.END).strip().split("\n")

        # C·∫≠p nh·∫≠t ch·ªâ m·ª•c cu·ªôc h·ªôi tho·∫°i hi·ªán t·∫°i
        self.current_conversation_index = selected_index

        # L√†m m·ªõi khung chat v·ªõi n·ªôi dung c·ªßa cu·ªôc h·ªôi tho·∫°i ƒë∆∞·ª£c ch·ªçn
        self.chat_area.config(state='normal')
        self.chat_area.delete("1.0", tk.END)  # X√≥a n·ªôi dung c≈©
        conversation_content = self.conversations[self.current_conversation_index]
        for line in conversation_content:
            self.chat_area.insert(tk.END, line + "\n")
        self.chat_area.config(state='disabled')  # Kh√¥ng cho ch·ªânh s·ª≠a tr·ª±c ti·∫øp
        self.chat_area.yview(tk.END)  # Cu·ªôn xu·ªëng cu·ªëi c√πng


    def connect_to_server(self):
        """K·∫øt n·ªëi t·ªõi server (gi·∫£ s·ª≠ l√† server chat)."""
        try:
            # Logic k·∫øt n·ªëi t·ªõi server
            self.is_connected = True
        except Exception as e:
            print(f"Error connecting to server: {e}")

    def disconnect_from_server(self):
        """Ng·∫Øt k·∫øt n·ªëi kh·ªèi server (n·∫øu c√≥)."""
        self.is_connected = False

    def connect_to_server(self):
        @sio.event
        def connect():
            print("K·∫øt n·ªëi th√†nh c√¥ng t·ªõi server!")
            self.display_message("Jarvis: Connected to server.")

        @sio.event
        def disconnect():
            print("Ng·∫Øt k·∫øt n·ªëi t·ª´ server!")
            self.display_message("Jarvis: Disconnected from server.")

        @sio.on('message')
        def on_message(data):
            print(f"Ph·∫£n h·ªìi t·ª´ server: {data}")
            self.typing_effect(f"Jarvis: {data}")

        try:
            sio.connect(SERVER_URL)
        except Exception as e:
            print(f": {e}")
            self.display_message(f"{e}")

    def send_message(self):
        self.tts_enabled = False  # T·∫Øt TTS khi g·ª≠i tin nh·∫Øn qua entry
        user_message = self.entry.get()
        if user_message.strip():
            self.display_message(f"You: {user_message}")
            try:
                sio.send(user_message)
            except Exception as e:
                self.display_message(f"Error sending message: {e}")
            self.entry.delete(0, tk.END)

    def speak_message(self):
        self.tts_enabled = True  # B·∫≠t TTS khi s·ª≠ d·ª•ng n√∫t Speak
        recognizer = sr.Recognizer()
        with sr.Microphone() as source:
            try:
                self.display_message("üé§ Jarvis: Listening...")
                audio = recognizer.listen(source, timeout=5)
                user_message = recognizer.recognize_google(audio, language="en-US")
                self.display_message(f"You: {user_message}")
                try:
                    sio.send(user_message)
                except Exception as e:
                    self.display_message(f"Error sending message: {e}")
            except sr.UnknownValueError:
                self.display_message("üé§ Jarvis: Couldn't understand. Please try again.")
            except sr.RequestError as e:
                self.display_message(f"üé§ Jarvis: Error connecting to service ({e})")
            except Exception as e:
                self.display_message(f"üé§ Jarvis: Error ({e})")

    def display_message(self, message):
        self.chat_area.config(state='normal')
        self.chat_area.insert(tk.END, f"{message}\n")
        self.chat_area.config(state='disabled')
        self.chat_area.see(tk.END)

    def typing_effect(self, message):
        def type_text():
            self.chat_area.config(state='normal')
            for char in message:
                self.chat_area.insert(tk.END, char)
                self.chat_area.see(tk.END)
                self.chat_area.update()
                time.sleep(0.05)  # Hi·ªáu ·ª©ng g√µ
            self.chat_area.insert(tk.END, "\n")
            self.chat_area.config(state='disabled')

        def speak_text():
            if self.tts_enabled and message.startswith("Jarvis:"):
                bot_response = message[5:]  # B·ªè ph·∫ßn "Jarvis: " ƒë·ªÉ ƒë·ªçc n·ªôi dung
                self.engine.say(bot_response)
                self.engine.runAndWait()

        # T·∫°o v√† ch·∫°y hai lu·ªìng ƒë·ªìng th·ªùi
        typing_thread = threading.Thread(target=type_text)
        tts_thread = threading.Thread(target=speak_text)

        typing_thread.start()
        tts_thread.start()
    # K·∫øt n·ªëi v·ªõi m√°y ch·ªß
    def on_message_received(*args):
        message = args[0]
    
        if message == "open_youtube":
            webbrowser.open("https://www.youtube.com", new=2)
        elif message == "open_facebook":
            webbrowser.open("https://www.facebook.com", new=2)
        elif message.startswith("search_google"):
            query = message.replace("search_google", "").strip()
            search_url = f"https://www.google.com/search?q={query}"
            webbrowser.open(search_url, new=2)
        else:
            print("Received message:", message)

    # K·∫øt n·ªëi v·ªõi m√°y ch·ªß WebSocket
    with SocketIO('127.0.0.1', 12345) as socketIO:
        socketIO.on('message', on_message_received)
        socketIO.wait()  # ƒê·ª£i s·ª± ki·ªán
    def close_connection(self):
        sio.disconnect()

if __name__ == "__main__":
    root = tk.Tk()
    client = ChatClient(root)
    root.protocol("WM_DELETE_WINDOW", client.close_connection)
    root.mainloop()
